<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="qLib" label="qLib">
    <memberTool name="AccessShotNode_qL"/>
    <memberTool name="ToggleViewportBackgroundColor_qL"/>
    <memberTool name="RealTimePlayback_qL"/>
    <memberTool name="ToggleIntegerFrames_qL"/>
    <memberTool name="AutoConnectNodes_qL"/>
    <memberTool name="AutonameNodes_qL"/>
    <memberTool name="ReferenceCopy_qL"/>
    <memberTool name="AttribDisplayMarkers_qL"/>
    <memberTool name="ToggleViewportTemplates_qL"/>
    <memberTool name="ToggleViewportGuides_qL"/>
    <memberTool name="ConvertPathParm_qL"/>
    <memberTool name="CrashRecovery_qL"/>
  </toolshelf>

  <tool name="ReferenceCopy_qL" label="Ref Copy qL" icon="BUTTONS_copy">
    <helpText><![CDATA[#icon: BUTTONS/copy
#context: obj
#type: tool

= Reference Copy qL =

*version 1*

"""Creates a Reference Copy where the reference source is easy to replace.
---
Alt-LMB: Use relative path for source operator.
"""

This function is the same as the original _Reference Copy_ operation,
but it adds an extra parameter that specifies the source operator name
where all parameter values are referenced from.

This way the reference source is easy to change.


@usage Using Reference Copy

Select node(s) and click the shelf button.

@relnotes Release Notes

_version 1_ ---

2015-01-16:
    - Added workaround for "assets with editable subnets can't be reference copied" issue
      (works with qLib nodes only)

2014-04-05:
    - Added Alt+LMB mode (creates relative path for reference source)

2014-02-14:
    - Fixed serious bug (worked properly only on frame 1)
    - Uses `chsop()` now to get OP paths

2013-03-10:
    - First version.
]]></helpText>
    <script scriptType="python"><![CDATA[# do the dunno
#
import hou
import re

def postproc_refcopy(nodepath, srcpath):
    N = hou.node(nodepath)

    if N:

        # add ref_source parameter
        #
        N.addSpareParmTuple(
            hou.StringParmTemplate(
                "ref_source", "Ref Source", 1,
                string_type=hou.stringParmType.NodeReference
            )
        )

        N.parm('ref_source').set(srcpath)

        # process linkage expressions
        #
        parms = N.parms()
        for p in parms:
            try:
                if True:
                    for k in p.keyframes():
                        x = k.expression()
                        x = re.sub('"\.\./[^/]+', 'chsop("ref_source")+"', x)
                        k.setExpression(x, hou.exprLanguage.Hscript)
                        p.setKeyframe(k)

            except Exception as e:
                print "failed for param '%s'" % p.name()

        # store typename of the creator tool
        #
        hou.hscript("opuserdata -n '___toolcount___' -v '%s' %s" % ('1', nodepath, ))
        hou.hscript("opuserdata -n '___toolid___' -v '%s' %s" % ('ReferenceCopy_qL', nodepath, ))


def fixum(node, mode):
    '''Workaround for the "assets with editable subnets cannot be reference copied" issue.'''
    try:
        n = hou.node(node)
        t = n.type()
        d = t.definition()

        tn = t.name()
        # hackish workaround: apply to all qLib nodes
        #
        if 'qLib::' in tn and '_ql' in tn:
            #print "(applying %s to %s)" % (mode, n.path(), )

            if mode=='open':
                n.allowEditingOfContents()
                pass

            if mode=='close':
                n.matchCurrentDefinition()
                pass
        else:
            #print "(skipping %s)" % (n.path(), )
            pass
    except:
        print "oops #1"
        pass

# main
#
sel = [ n.path() for n in hou.selectedNodes() ]

alt = kwargs['shiftclick'] or kwargs['altclick'] or kwargs['ctrlclick']

for S in sel:
    c = len( hou.hscript( 'opls -d %s*' % S )[0].split() )
    T = '%s_copy%d' % (S, c)

    try:
        fixum(S, 'open') # "Allow Editing of Contents" for S
        hou.hscript('opcp -c %s %s' % (S, T))
        fixum(S, 'close') # "Match Current Definition" for S and T
        fixum(T, 'close')
    except:
        print "oops #2, %s" % S
        pass

    if True:
        srcpath = S
        if alt:
            srcpath = hou.node(T).relativePathTo(hou.node(S))
        postproc_refcopy(T, srcpath)

]]></script>
  </tool>

  <tool name="AttribDisplayMarkers_qL" label="attr.vis" icon="BUTTONS_displayoptions">
    <helpText><![CDATA[#icon: BUTTONS/displayoptions
#context: obj
#type: tool

= Attrib Display Markers qL =

*version 1*

"""Creates display markers for all the attributes present on the displayed operator.
----
Shift-LMB: Clear previously built
Ctrl-LMB: Clear ALL markers then rebuild
Ctrl+Shift-LMB: Clear ALL markers
"""

This function builds visual display markers for all the attributes
that exist on the currently displayed operator.

(It can be considered as a shortcut to the similar function of the
[Attr Visualize qL SOP|node:sop/qLib::attr_visualize_ql::1]'s
_Marker_ section.)

@usage Usage

((LMB)):
    Builds attribute markers for the current Display SOP.
    (Existing markers will also be rebuilt.)
((Shift + LMB)):
    Clears previously built attribute markers.
    (Markers not built with this function will be preserved.)
((Ctrl + LMB)):
    Clears _all_ markers (made by this tool or otherwise)
    and rebuilds the attribute marker list.
((Ctrl + Shift + LMB)) . :
    Deletes _all_ display markers. _All of them._


@related
    - [Attr Visualize qL SOP|node:sop/qLib::attr_visualize_ql::1]
    - ...

@usage Using Add Display Markers

Set the Display flag on a node and click the shelf button. Then press
the `D` key in a Scene View, go to the Markers tab to see the generated
attribute markers ("Custom" section.)



]]></helpText>
    <script scriptType="python"><![CDATA[import hou
import toolutils


def ynreq(msg):
    return hou.ui.displayMessage(msg, ["Ok", "Cancel"]) == 0

def dispmsg(msg):
    hou.ui.setStatusMessage(msg)



def get_current_viewer_name():
    v = toolutils.sceneViewer()
    w = "%s.%s.world" % \
            (v.pane().desktop().name(), \
            v.name() )
    return w



def get_display_sop():
    v = None
    try:
        v = toolutils.sceneViewer()
        v = v.pwd() # OBJ object
        v = v.displayNode()
    except:
        v = None
        dispmsg("couldn't get Display (S)OP")
    return v



def clear_built_markers(kwargs=None, clearAll=False):
    if True: #ynreq("Clear %s display markers?" % "ALL" if clearAll else "generated"):
        for m in hou.hscript("viewoptls")[0].split():
            if clearAll or '_vis_' in m:
                print "viewoptrm %s" % m
                hou.hscript("viewoptrm %s" % m)





def build_markers(kwargs=None): # ( was create_markers() )
    """."""

    type_names = {
        hou.attribType.Point: "point",
        hou.attribType.Prim: "prim",
        hou.attribType.Vertex: "vertex"
    }

    type_labels = {
        hou.attribType.Point: "p:",
        hou.attribType.Prim: "pr:",
        hou.attribType.Vertex: "vt:"
    }

    pwd = get_display_sop()
    if pwd: dispmsg("display OP: %s" % pwd.path())
    else: return

    type_name  = lambda t: type_names[t]  if t in type_names  else ""
    type_label = lambda t: type_labels[t] if t in type_labels else ""
    p  = lambda n: pwd.parm(n).eval()
    ps = lambda n: pwd.parm(n).eval().strip()

    views = hou.hscript("viewls -n")[0].split()
    g = pwd.geometry()

    def to_as(attrs):
        return " ".join( [ a.name() for a in attrs if a.dataType() is not hou.attribData.String ] )

    #force_tx  = ps('force_text').split()
    #vel_attrs = ps('vel_attribs').split()

    force_tx = 'P Cd uv'.split()
    vel_attrs = 'v accel'.split()

    scale_v   = 1.0 # vec scale
    scale_vel = (1/24.0) # velocity scale

    attrs_pt = to_as(g.pointAttribs())
    attrs_pr = to_as(g.primAttribs())
    attrs_vtx = to_as(g.vertexAttribs())

    #attrs_display = ps('markers_display').split()
    #if p('do_markers_display')==0: attrs_display = []

    CS = [
            (attrs_pt, g.findPointAttrib),
            (attrs_pr, g.findPrimAttrib),
            (attrs_vtx, g.findVertexAttrib)
        ]

    hue = 120.0
    color = hou.Color()

    for C in CS:

        attrs = C[0].split()
        find_attr_func = C[1] #g.findPointAttrib

        # add textual version of vector attrs
        attrs += [ ("text:%s" % v) for v in attrs if find_attr_func(v).size()==3 ]
        attrs = sorted(attrs)

        for name in attrs:

            tx = "text:" in name
            name = name.replace("text:", "")

            a = find_attr_func(name)
            if a and a.dataType() is not hou.attribData.String:
                opt_name = "_vis_%s_%d" % (name, tx, )
                size = a.size()
                is_xn = a.isTransformedAsNormal()
                is_xv = a.isTransformedAsVector()
                is_vect = size==3 and not tx # and name not in force_tx
                as_vel = name in vel_attrs
                scale = scale_vel if as_vel else scale_v
    
                label = "%s%s" % ( type_label(a.type()), name )
    
                if is_vect:
                    label += " [vec."
                    if as_vel: label += "/v."
                    if is_xn: label += "; xformed as normal"
                    if is_xv: label += "; xformed as vector"
                    label += "]"
                else:
                    pass # label += " (num)"
    
                print "--- %s: '%s'" % (name, label)
    
                # create/update marker
    
                hou.hscript('viewoptrm %s' % opt_name)
                hou.hscript('viewoptadd %s %s' % ('vector' if is_vect else 'text', opt_name))
    
                def vos(parm, val):
                    print ' --- viewoptset %s %s ( %s )' % (opt_name, parm, val)
                    hou.hscript('viewoptset %s %s ( %s )' % (opt_name, parm, val))

                if True:    
                    vos('attrib', a.name())
                    vos('class', type_name(a.type()))
                    vos('label', '"%s"' % label)
                    vos('overridecolor', '1')

                    val = 0.85 if is_vect else 0.15

                    color.setHSV((hue, 0.9, val)); vos('color', '%f %f %f' % color.rgb())
                    color.setHSV((hue, 0.4, val+0.1)); vos('selcolor', '%f %f %f' % color.rgb())
                    hue += 137.5 * 0.5

                if is_vect:
                    vos('scale', scale)

                if False: # name in attrs_display:
                    for view in views:
                        hou.hscript('viewoptenable %s all +%s' % (view, opt_name))
                    hue += 137.5/2.0

            else:
                print "couldn't find attribute %s" % name

    print "done. ------------"

'''
viewoptset
    vector_dunno
        arrow ( 0 )
        attrib ( N )
        class ( point )
        color ( 0 0 1 )
        icon ( SI_pointNormal )
        label ( "pr: primN (vector)" )
        overridecolor ( 0 )
        scale ( 1 )
        selcolor ( 0 0.45 1 )
        visibility ( 1 )
'''


print kwargs

shift = kwargs['shiftclick']
ctrl  = kwargs['ctrlclick']
alt   = kwargs['altclick']

clear_built_markers(kwargs, clearAll=ctrl)

if not shift:
    build_markers(kwargs)
]]></script>
  </tool>

  <tool name="ToggleIntegerFrames_qL" label="int.frames" icon="PLAYBAR_editable_keys">
    <helpText><![CDATA[#icon: PLAYBAR/editable_keys
#context: obj
#type: tool

= Toggle Integer Frames qL =

*version 1*

"""Toggle non-integer frame values on the playbar."""
]]></helpText>
    <script scriptType="python"><![CDATA[import hou

m = not hou.playbar.usesIntegerFrames()
hou.playbar.setUseIntegerFrames(m)

hou.ui.setStatusMessage(" ---- Using Integer Frames: %s" % ("ON" if m else "OFF"))
]]></script>
  </tool>

  <tool name="ToggleViewportBackgroundColor_qL" label="/backgnd/" icon="COP2_invert">
    <helpText><![CDATA[#icon: COP2/invert
#context: obj
#type: tool

= Cycle Viewport Background Color qL =

*version 1*

"""Cycles between viewport color schemes (dark, grey, light).
----
LMB: Cycle background color
Ctrl-LMB: Reset to black
Shift-LMB: Reset to grey
"""

@bugs Limitations

- It might not seem to work for the first time (try clicking again, then)


@relnotes Release Notes

_version 1_ ---

2015-02-24:
    - Added dark/grey/light cycle (H14)

2014-02-14:
    - First version (in qLib).
]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils

bg = None

try:
    # cycle next bg
    if kwargs['ctrlclick']: raise
    bgs = hou.session.bg[:]
    bgs = bgs[1:]+bgs[:1]
    if kwargs['shiftclick']: bgs = ['bw', 'light', 'wb']
    bg = bgs[0]
    hou.session.bg = bgs
except:
    # set up default bg vars
    hou.session.bg = ['wb', 'bw', 'light']
    bg = hou.session.bg[0]

bgs = { 'wb':'dark', 'bw':'grey', 'light':'light' }

hou.hscript("viewdisplay -B %s *" % bg)
hou.ui.setStatusMessage("Cycled background to %s" % bgs[bg].upper() )]]></script>
  </tool>

  <tool name="AutonameNodes_qL" label="Auto-Name" icon="BUTTONS_comment_out">
    <helpText><![CDATA[#icon: BUTTONS/comment_out
#context: obj
#type: tool

= Autoname Nodes qL =

*version 1*

"""Set operator names based on its type and specific parameter settings and/or its context.
----
LMB: Automatically name selected OPs
Alt-LMB: Alternative naming (see help)
Ctrl-LMB: Reset name/color to defaults
"""

This function sets operator names, based on various criteria (operator type, parameter settings
and network connectivity context). Context is especially considered when naming Null OPs.

@usage Usage

There are several ways of invoking this function, when clicking on the shelf tool:

((LMB)):
    Auto-naming of selected operators.
((Alt + LMB)):
    Alternative auto-naming mode (see below).
((Ctrl + LMB)):
    Reset name and color of selected operators.


@method Auto-naming methods

*General*

Auto-naming follows the general guidelines:

- For most network container OPs it sets a default name
  (e.g. _SHADERS_ for a shopnet, etc).

- For operators that refer to an external file (alembic, etc)
  or another operator (e.g. Object Merge SOP), the name will
  contain the file or operator name.


*Null OPs*

For Null operators, the function will try to determine the role
of the null based on input/output connections, and name (and color)
it accordingly.

(TODO: finish this)

- mid-network:
  - named -> GEO_ prefix ('waypoint')
  - unnamed -> gets darker color if has multiple outputs ('crossroads')
- lonely null (no input/output): toggle between 'RENDER' (alt: 'DISPLAY') and regular null
- endpoint (has input, no output):
  - unnamed -> OUT (alt: DISPLAY)
  - named -> add OUT_ prefix



@todo To Do
    - Automatic coloring of network containers
    - Better support for Object Merge SOP


@relnotes Release Notes

_version 1_ ---

2014-02-20:
    - Added a more complex Null OP autonaming mechanism
    - Added other modes (reset, alternative)

2014-02-14:
    - First version (in qLib).
]]></helpText>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>qLib--Shelf</toolSubmenu>
    <script scriptType="python"><![CDATA[import hou
import re
import traceback



def name_null(node, altmode=False):
    '''.'''

    colors = {
        'normal':  hou.Color((0.80, 0.80, 0.80)),
        'red':     hou.Color((0.47, 0.00, 0.00)),
        'grey':    hou.Color((0.70, 0.70, 0.70)),
        'm-grey':  hou.Color((0.52, 0.52, 0.52)),
        'green':   hou.Color((0.00, 0.27, 0.00)),
        'render':  hou.Color((.4,.2,.6)),
        'display': hou.Color((0,.4,1)),
    }

    N = node
    n = N.name()

    tt = N.type().nameWithCategory()
    is_sop = tt=='Sop/null'
    is_dop = tt=='Dop/null'
    is_noname = re.search('^null', n) is not None

    if not is_sop and not is_dop:
        return

    n_ins  = len(N.inputs())
    n_outs = len(N.outputs())

    n0= n
    n = re.sub('^[A-Z]+[-_]+', '', n)
    c = None
    unique = True
    do_reset = False

    prefix = 'OP'
    if is_sop: prefix='GEO'
    if is_dop: prefix='DYN'

    if n_outs == 0:
        # bottom-of-network null
        print "--- bottom-of-network"
        if not is_sop: altmode=False
        if is_noname or n=='OUT' or n=='DISPLAY' or altmode:
            n, c = ('OUT', 'normal') if not altmode else ('DISPLAY', 'display')
            unique = False
        else:
            n = 'OUT_%s' % n
            c = 'green'

    else:
        # mid-network null
        print "--- mid-network"

        if not is_noname:
            # mid-network null already named,
            # just needs a prefix
            n = '%s_%s' % (prefix, n, )
            c = 'red'

        else:
            # unnamed mid-network null, skip
            if n_outs>1:
                c='m-grey'
            n = None


    if n_ins==0 and n_outs==0:
        # lonely null
        if is_sop:
            n1 = 'DISPLAY' if altmode else 'RENDER'
            c = n1.lower()
            if not n0.startswith(n1):
                n = n1
                #c = 'render'
                unique = False
            else:
                do_reset = True


    if do_reset:
        n = 'null1'
        c = 'normal'
        unique = True

    # perform rename
    #
    try:
        if n is not None and n!='':
            N.setName(n, unique_name=unique)
        if c in colors:
            N.setColor(colors[c])
    except:
        pass




pg = ('file', 'fileName', )

pd = {
    # general
    'shopnet': ('SHADERS', ),
    'chopnet': ('CHOPS', ),
    'cop2net': ('COMPOSITE', ),
    'ropnet': ('RENDER', ),
    # OBJs
    'instance': ('inst--', 'instancepath', ),
    'alembicarchive': ('abc--', 'fileName', ),
    'alembicxform': ('abcxform--', 'fileName', ),
    'qLib::alembic_xform_ql::1': ('abcxform--', 'fileName', ),
    # SOPs
    'object_merge': ('objm--', 'objpath1', 'group1', ),
    'alembic': ('abc_', 'fileName', ),
}


def autoname_selected_nodes(reset=False, altmode=False):
    '''.'''

    print "\nAutonaming selected nodes..."
    
    for N in hou.selectedNodes():
    
        name = None
        P = N.path()
        T = N.type().name()
    
        print " - node: %s (%s)" % (P, T, )

        if reset:
            name = N.name()
            if not name.startswith(T):
                N.setName('%s1' % T, unique_name=True)
                N.setColor(hou.Color((0.8, 0.8, 0.8)))
            continue

        if T=='null':
            name_null(N, altmode=altmode)
            continue
    
        if T in pd:
            pdt = pd[T]

            # TODO: handle object_merge SOP as special case
            # ("fuller" path for SOPs)
    
            if len(pdt)>1:
                name = N.parm(pdt[1]).eval()
                # TODO: if path points to SOP, include parent OBJ (object_merge)
                name = re.search("[^/\\\\]+$", name).group(0) # pop any path
                name = '%s%s_1' % (pdt[0], name, )
            else:
                name = pdt[0]
    
        if name is None:
            for p in pg:
                if N.parm(p):
                    name = N.parm(p).eval()
    
        if False:
            if N.parm("file"):
                # alembic archive (anything with a .fileName parameter)
                n = N.parm("file")
                name = n.evalAsString()
        
            elif N.parm("fileName"):
                # alembic archive (anything with a .fileName parameter)
                n = N.parm("fileName")
                name = n.evalAsString()
                #$name = re.sub("\.abc$", "", name)
                #name = re.sub("_v[0-9]+$", "", name)
    
        # TODO: geo w/ single alembic node in it
    
        print " -- name:", name
    
        if name:
            # strip any path from it
            name = re.search("[^/\\\\]+$", name).group(0)
            print " -- name:", name
    
            try:
                N.setName(name, unique_name=True)
            except:
                print "OOPS:", traceback.format_exc()
    


shift = kwargs['shiftclick']
ctrl  = kwargs['ctrlclick']
alt   = kwargs['altclick']

autoname_selected_nodes(reset=ctrl, altmode=alt)

]]></script>
  </tool>

  <tool name="RealTimePlayback_qL" label="realtime" icon="PLAYBAR_realtime">
    <helpText><![CDATA[#icon: PLAYBAR/realtime
#context: obj
#type: tool

= Toggle Integer Frames qL =

*version 1*

"""Toggle non-integer frame values on the playbar.
----
LMB: Enable real-time playback
Shift-LMB: Disable real-time playback
"""
]]></helpText>
    <script scriptType="python"><![CDATA[import hou

hou.playbar.setRealTime( not kwargs['shiftclick'] )]]></script>
  </tool>

  <tool name="ToggleViewportGuides_qL" label="/guides/" icon="NODEFLAGS_origin">
    <helpText><![CDATA[#icon: IMAGE/view_guides
#context: obj
#type: tool

= Toggle Viewport Guides qL =

*version 1*

"""Toggles OP guide display in the viewports."""

@bugs Limitations

- It might behave inconsistently between viewports (and needs to be clicked twice)


@relnotes Release Notes

_version 1_ ---

2014-03-20:
    - First version.
]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils

v = toolutils.sceneViewer()
w = "%s.%s.world" % \
        (v.pane().desktop().name(), \
        v.name() )
#print "view:", w

if not hasattr(hou.session, "guides"):
    hou.session.guides = True

hou.session.guides = not hou.session.guides
#hou.hscript("viewdisplay -g %s %s" % ("on" if hou.session.guides else "off", w, ))
hou.hscript("viewdisplay -g %s *" % ("on" if hou.session.guides else "off", ))
hou.ui.setStatusMessage("Geometry guides are now %s" % ("DISPLAYED" if hou.session.guides else "OFF") )]]></script>
  </tool>

  <tool name="ToggleViewportTemplates_qL" label="/templates/" icon="NODEFLAGS_template">
    <helpText><![CDATA[#icon: NODEFLAGS/template
#context: obj
#type: tool

= Toggle Viewport Templates qL =

*version 1*

"""Toggles template geometry display in viewports.
----
LMB: Toggle template display
Shift-LMB: Clear display template flag on all (S)OPs
"""

@usage Usage

((LMB)):
    Toggles template display (Display Options -> Guides -> Templated geometry, Selectable templates)
((Shift + LMB)):
    Clears template flag on all (S)OPs within the currently displayed container


@related
    - ...

]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils

shift = kwargs['shiftclick']
ctrl  = kwargs['ctrlclick']
alt   = kwargs['altclick']


if shift or alt or ctrl:
    n = toolutils.sceneViewer()
    n = n.pwd() # container node

    for c in n.children():
        try:
            c.setTemplateFlag(0)
            c.setSelectableTemplateFlag(0)
        except:
            pass

    hou.ui.setStatusMessage("Cleared all display template flags")
else:

    if not hasattr(hou.session, "templates"):
        hou.session.templates = True
    
    hou.session.templates = not hou.session.templates
    t = 'on' if hou.session.templates else 'off'
    hou.hscript("viewdisplay -T %s -i %s *" % (t, t, ))
    hou.ui.setStatusMessage("Templates are now %s" % ("DISPLAYED" if hou.session.templates else "OFF") )
]]></script>
  </tool>

  <tool name="AutoConnectNodes_qL" label="A-Connect" icon="BUTTONS_chooser_node">
    <helpText><![CDATA[#icon: BUTTONS/chooser_node
#type: tool

= Auto-Connect Nodes qL =

*version 1*

"""Connects selected operator(s) automatically.
----
LMB: Automatically connect selected OPs
Ctrl-LMB: Disconnect selected OPs
"""

This function creates connection(s) between the selected node(s)

This function sets operator names, based on various criteria (operator type, parameter settings
and network connectivity context). Context is especially considered when naming Null OPs.

@usage Usage

Ways of invoking this function, when clicking on the shelf tool:

((LMB)):
    Auto-connecting of selected operators.
((Alt + LMB)):
    Alternate mode (see below).
((Ctrl + LMB)):
    Disconnects selected operators.


@method Auto-connection methods

*Network building (single OP selection)*

_A single operator have to be selected that have no input connection(s)._

Recommended usage: place the newly created operator near and under
its would-be upstream node, and apply this function.

- The nearest above operator with unconnected output will be searched,
  and connected into the selected node.
  (The current operator will also be repositioned if the two nodes are close.)

- If the operator has multiple (e.g. two) inputs, the two nearest available
  above operators will be connected (in a left-to-right order, in accord with
  the order of the input connectors).


@todo To Do
    - ...


@relnotes Release Notes

_version 1_ ---

2014-07-02:
    - First version (in qLib).
]]></helpText>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>qLib--Shelf</toolSubmenu>
    <script scriptType="python"><![CDATA[import hou
import re
import traceback



def sort_nodes_by_y(nodes, bottomUp=False):
    '''.'''
    return sorted(nodes, key=lambda n: n.position()[1] if bottomUp else -n.position()[1] )


def sort_nodes_by_x(nodes, rightToLeft=False):
    '''.'''
    return sorted(nodes, key=lambda n: -n.position()[0] if rightToLeft else n.position()[0] )


def dist2d(n1, n2):
    '''.'''
    return n1.position().distanceTo( n2.position() )


def sort_nodes_by_dist(nodes, N):
    '''.'''
    return sorted(nodes, key=lambda n: dist2d(n, N) )




def find_nearest_above(N, nodes, maxNodes=2):
    '''Find the nearest available nodes above N.'''

    Npy = N.position()[1]
    r = [ n for n in nodes if n.position()[1]>(Npy+0.8) and len(n.outputs())==0 ]
    r = sort_nodes_by_dist(r, N)
    if maxNodes>0: r = r[:maxNodes]
    return r



def autobuild_single(N, altmode=False):
    '''.'''
    print " - auto-building %s" % N.path()

    num_c = len(N.inputConnectors())
    if num_c==0: return

    if num_c>2: num_c=1 # max 2 inputs
    nodes = N.parent().children()
    nodes = find_nearest_above(N, nodes, maxNodes=num_c)

    N.setDisplayFlag(True)
    N.setRenderFlag(True)

    if len(nodes)>0:

        if num_c>1:
            # multiple input connectors
            nodes = sort_nodes_by_x(nodes)
            m = min(num_c, len(nodes))

            for i in range(m):
                N.setInput(i, nodes[i], 0)
        else:
            # single input connector
            P = nodes[0]
            N.setInput(0, P, 0)
    
            # align w/ parent if necessary
            d = dist2d(N, P)
            print " -- dist: %f" % d
            if d<1.333 and not altmode:
                Pp = P.position()
                Np = N.position()
                Np[0] = Pp[0]
                Np[1] = Pp[1]-0.9
                N.setPosition(Np)



def disconnect(N, recurse=True):
    '''.'''
    if recurse:
        for n in N.outputs():
            disconnect(n, recurse=False)

    for i in range( len(N.inputConnectors()) ):
        N.setInput(i, None, 0)




def autoconnect_selected_nodes(reset=False, altmode=False):
    '''.'''

    nodes = hou.selectedNodes()
    nodes = sort_nodes_by_y(nodes)

    num_selected = len(nodes)

    print("Autoconnecting selected nodes (%d)..." % num_selected )

    for N in nodes:
    
        name = None
        P = N.path()
        T = N.type().name()
    
        print " - node: %s (%s) [%s]" % (P, T, str(N.position()), )

        num_inputs = len(N.inputs())
        num_outputs = len(N.outputs())

        if reset:
            disconnect(N)
            continue

        if num_selected==1 and num_inputs==0:
            autobuild_single(N, altmode=altmode)
            continue





shift = kwargs['shiftclick']
ctrl  = kwargs['ctrlclick']
alt   = kwargs['altclick']

autoconnect_selected_nodes(reset=ctrl, altmode=alt)

]]></script>
  </tool>

  <tool name="ConvertPathParm_qL" label="Convert Path" icon="BUTTONS_comment_out">
    <helpText><![CDATA[#icon: BUTTONS/comment_out
#context: obj
#type: tool

= Convert Path Parm qL =

*version 1*

"""Convert between absolute and relative path representation.
----
LMB: Automatically name selected OPs
Alt-LMB: Alternative naming (see help)
Ctrl-LMB: Reset name/color to defaults
"""

...

@usage Usage

...


@todo To Do
    - ...


@relnotes Release Notes

_version 1_ ---

2014-09-11:
    - First version.
]]></helpText>
    <script scriptType="python"><![CDATA[import hou
import re
import traceback

hou.ui.displayMessage("(...not yet implemented...)")

]]></script>
  </tool>

  <tool name="AccessShotNode_qL" label="::shot::" icon="NETWORKS_scene">
    <helpText><![CDATA[#icon: COP2/invert
#context: obj
#type: tool

= Access: Shot Node qL =

*version 1*

"""Opens a floating parameter panel for scene Shot qL node(s).
---
LMB: All Shot and Environment nodes
Shift-LMB: Only "active" Shot(s) (visible/selectable)
Alt-LMB: Environment nodes only
"""

@bugs Limitations

- ...


@relnotes Release Notes

_version 1_ ---

2014-10-12:
    - First version.
]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils


def show_parms(ops, title="Parameters", kwargs=None):
    """."""
    PT = hou.paneTabType.Parm
    P = None
    t = None

    for op in ops:
        if P is None:
            P = hou.ui.curDesktop().createFloatingPanel(PT)
            P.setName(title)
            t = P.panes()[0].tabs()[0]
        else:
            t = P.panes()[0].createTab(PT)

        if t:
            t.setPin(True)
            t.setCurrentNode(op)

    return P



ctrl = kwargs['ctrlclick']
shift = kwargs['shiftclick']
alt = kwargs['altclick']

is_shot = lambda n: 'qLib::shot_ql' in n.type().name()
is_env = lambda n: 'qLib::environment_ql' in n.type().name()

# find all Shot qL OPs first
#
shots = [ c for c in hou.node('/').allSubChildren()
    if is_shot(c) or is_env(c) ]

if shift or ctrl:
    shots = [ n for n in shots if n.isSelectableInViewport() or n.isDisplayFlagSet() ]

if alt:
    shots = [ n for n in shots if is_env(n) ]

shots = sorted(shots,
    key=lambda n: '%s %d %d %s' % (n.type().name(),
        n.isSelectableInViewport(),
        n.isDisplayFlagSet(),
        n.name(), )
    )

show_parms(shots, title="Scene Global(s)", kwargs=kwargs)

]]></script>
  </tool>

  <tool name="CrashRecovery_qL" label="::recover::" icon="MISC_satchel">
    <script scriptType="python"><![CDATA[import qlibutils

qlibutils.do_crash_recovery()

]]></script>
  </tool>
</shelfDocument>
