// Magic: 1bec6c8b
// Automatically generated PSI dialog (PSI version 14.0.361)
// Wed Jun 24 15:50:05 2015


f_tmp = FLOAT_FIELD;	// dialog.top.ui
keeppos.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
keeppos.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

keeppos.gad = ROW
{
    

    PARM_BUTTON("keeppos", "Keep position when parenting") toggle VALUE(keeppos.val);

    {  }

}

pre_xform.gad = ROW
{

    {  }
    { WIDTH(0.1) }

    pre_xform.menu;
}
}	
}	// Template join.bot

xOrd.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
xOrd.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

xOrd.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 

    PARM_LABEL_SIMPLE("Transform Order", "xOrd") WIDTH(1.5);
    { WIDTH(0.09) }

    xOrd.menu;

    {  }

}

rOrd.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 

    rOrd.menu;

    {  }

}
}	
}	// Template join.bot


t.gad = ROW
{
   HSTRETCH

   t.label = PARM_LABEL("Translate", "t") WIDTH(1.5);
   PARM(float, 3, "t", none, none, "X,Y,Z")
	RANGE(0,1)  LABELREF(t.label)
	HSTRETCH;

}

r.gad = ROW
{
   HSTRETCH

   r.label = PARM_LABEL("Rotate", "r") WIDTH(1.5);
   PARM(float, 3, "r", none, none, "X,Y,Z")
	RANGE(0,360)  LABELREF(r.label)
	HSTRETCH;

}
s.gad = NULL { }
scale.gad = NULL { }

p.gad = ROW
{
   HSTRETCH

   p.label = PARM_LABEL("Pivot", "p") WIDTH(1.5);
   PARM(float, 3, "p", none, none, "X,Y,Z")
	RANGE(0,1)  LABELREF(p.label)
	HSTRETCH;

}

lookatpath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 lookatpath.label = PARM_LABEL("Look At", "lookatpath") WIDTH(1.5);
 PARM_FIELD(pathstring, "lookatpath") VALUE(lookatpath.val) 
	LABELREF(lookatpath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(lookatpath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(lookatpath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}

lookup.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Look At Up Vector", "lookup") WIDTH(1.5);
    { WIDTH(0.09) }

    lookup.menu;

    { HSTRETCH }

}

pathobjpath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 pathobjpath.label = PARM_LABEL("Path Object", "pathobjpath") WIDTH(1.5);
 PARM_FIELD(pathstring, "pathobjpath") VALUE(pathobjpath.val) 
	LABELREF(pathobjpath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(pathobjpath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(pathobjpath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}

roll.gad = ROW
{
   HSTRETCH

   roll.label = PARM_LABEL( "Roll", "roll" ) WIDTH(1.5);
   PARM(float, 1, "roll", none, none) RANGE(-360, 360)
	LABELREF( roll.label ) HSTRETCH;

}

pos.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 pos.label = PARM_LABEL("Position", "pos") WIDTH(1.5);
 PARM(float, 1, "pos", none, none) RANGE(0,10)
	LOCK_RANGE_MIN LABELREF(pos.label) HSTRETCH;

}

uparmtype.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Parameterization", "uparmtype") WIDTH(1.5);
    { WIDTH(0.09) }

    uparmtype.menu;

    { HSTRETCH }

}

pathorient.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 pathorient.label = PARM_LABEL("Orient Along Path", "pathorient") WIDTH(1.5);
 PARM(integer, 1, "pathorient", none, none) RANGE(0,1)
	 LABELREF(pathorient.label) HSTRETCH;

}

up.gad = ROW 
{
    HSTRETCH

    up.label = PARM_LABEL("Orient Up Vector", "up") WIDTH(1.5);
    PARM(float, 3, "up", none, none) LABELREF(up.label)
	HSTRETCH;

}

bank.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 bank.label = PARM_LABEL("Auto-Bank factor", "bank") WIDTH(1.5);
 PARM(float, 1, "bank", none, none) RANGE(-1,1)
	 LABELREF(bank.label) HSTRETCH;

}
ar_light_type.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

ar_light_type.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 

    PARM_LABEL_SIMPLE("Light Type", "ar_light_type") WIDTH(1.5);
    { WIDTH(0.09) }

    ar_light_type.menu;

    {  }

}

light_enable.gad = ROW
{
    

    {  }
    { WIDTH(0.08) }

    PARM_BUTTON("light_enable", "Enable Light") toggle VALUE(light_enable.val);

    {  }

}
}	// Template join.bot

ar_light_color_type.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

ar_light_color_type.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 

    PARM_LABEL_SIMPLE("Color Type", "ar_light_color_type") WIDTH(1.5);
    { WIDTH(0.09) }

    ar_light_color_type.menu;

    {  }

}

ar_resolution.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_resolution.label = PARM_LABEL("  Resolution", "ar_resolution") ;
 PARM(integer, 1, "ar_resolution", none, none) RANGE(64,4096)
	 LABELREF(ar_resolution.label) HSTRETCH;

}
}	// Template join.bot


ar_format.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Projection", "ar_format") WIDTH(1.5);
    { WIDTH(0.09) }

    ar_format.menu;

    { HSTRETCH }

}

ar_color.gad = 
{
    LAYOUT (horizontal) HSTRETCH

    ar_color.label = PARM_LABEL("Color", "ar_color") WIDTH(1.5);
    PARM(float, 3, "ar_color", none, COLOR, "R,G,B") 
	LABELREF(ar_color.label) HSTRETCH;

}

ar_light_color_texture.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

 ar_light_color_texture.label = PARM_LABEL("Color Texture", "ar_light_color_texture") WIDTH(1.5);

 PARM_FIELD (pathstring, "ar_light_color_texture") LABELREF(ar_light_color_texture.label)
	VALUE(ar_light_color_texture.val) HSTRETCH;

    ar_light_color_texture.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(ar_light_color_texture.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}

ar_light_color_shader.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 ar_light_color_shader.label = PARM_LABEL("Color Shader", "ar_light_color_shader") WIDTH(1.5);
 PARM_FIELD(pathstring, "ar_light_color_shader") VALUE(ar_light_color_shader.val) 
	LABELREF(ar_light_color_shader.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(ar_light_color_shader.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(ar_light_color_shader.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}

ar_intensity.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_intensity.label = PARM_LABEL("Intensity", "ar_intensity") WIDTH(1.5);
 PARM(float, 1, "ar_intensity", none, none) RANGE(0,10)
	 LABELREF(ar_intensity.label) HSTRETCH;

}

ar_exposure.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_exposure.label = PARM_LABEL("Exposure", "ar_exposure") WIDTH(1.5);
 PARM(float, 1, "ar_exposure", none, none) RANGE(-10,10)
	 LABELREF(ar_exposure.label) HSTRETCH;

}
ar_volume_density.gad = NULL { }

ar_samples.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_samples.label = PARM_LABEL("Samples", "ar_samples") WIDTH(1.5);
 PARM(integer, 1, "ar_samples", none, none) RANGE(0,10)
	 LABELREF(ar_samples.label) HSTRETCH;

}

ar_volume_samples.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_volume_samples.label = PARM_LABEL("Volume Samples", "ar_volume_samples") WIDTH(1.5);
 PARM(integer, 1, "ar_volume_samples", none, none) RANGE(0,10)
	 LABELREF(ar_volume_samples.label) HSTRETCH;

}

ar_point_radius.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_point_radius.label = PARM_LABEL("Radius", "ar_point_radius") WIDTH(1.5);
 PARM(float, 1, "ar_point_radius", none, none) RANGE(0,10)
	 LABELREF(ar_point_radius.label) HSTRETCH;

}

ar_angle.gad = ROW
{
   HSTRETCH

   ar_angle.label = PARM_LABEL( "Angle", "ar_angle" ) WIDTH(1.5);
   PARM(float, 1, "ar_angle", none, none) RANGE(0, 180)
	LABELREF( ar_angle.label ) HSTRETCH;

}

ar_cone_angle.gad = ROW
{
   HSTRETCH

   ar_cone_angle.label = PARM_LABEL( "Cone Angle", "ar_cone_angle" ) WIDTH(1.5);
   PARM(float, 1, "ar_cone_angle", none, none) RANGE(0, 180)
	LABELREF( ar_cone_angle.label ) HSTRETCH;

}

ar_penumbra_angle.gad = ROW
{
   HSTRETCH

   ar_penumbra_angle.label = PARM_LABEL( "Penumbra Angle", "ar_penumbra_angle" ) WIDTH(1.5);
   PARM(float, 1, "ar_penumbra_angle", none, none) RANGE(0, 20)
	LABELREF( ar_penumbra_angle.label ) HSTRETCH;

}

ar_spot_radius.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_spot_radius.label = PARM_LABEL("Spot Radius", "ar_spot_radius") WIDTH(1.5);
 PARM(float, 1, "ar_spot_radius", none, none) RANGE(0,10)
	 LABELREF(ar_spot_radius.label) HSTRETCH;

}

ar_lens_radius.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_lens_radius.label = PARM_LABEL("Lens Radius", "ar_lens_radius") WIDTH(1.5);
 PARM(float, 1, "ar_lens_radius", none, none) RANGE(0,10)
	 LABELREF(ar_lens_radius.label) HSTRETCH;

}

ar_aspect_ratio.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_aspect_ratio.label = PARM_LABEL("Aspect Ratio", "ar_aspect_ratio") WIDTH(1.5);
 PARM(float, 1, "ar_aspect_ratio", none, LOGSCALE) RANGE(0.050000000000000003,20)
	 LABELREF(ar_aspect_ratio.label) HSTRETCH;

}

ar_quad_size.gad = ROW
{
   HSTRETCH

   ar_quad_size.label = PARM_LABEL("Quad Size", "ar_quad_size") WIDTH(1.5);
   PARM(float, 2, "ar_quad_size", none, none, "X,Y")
	RANGE(-1,1)  LABELREF(ar_quad_size.label)
	HSTRETCH;

}

ar_disk_radius.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_disk_radius.label = PARM_LABEL("Disk Radius", "ar_disk_radius") WIDTH(1.5);
 PARM(float, 1, "ar_disk_radius", none, none) RANGE(0,10)
	 LABELREF(ar_disk_radius.label) HSTRETCH;

}

ar_cylinder_radius.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_cylinder_radius.label = PARM_LABEL("Radius", "ar_cylinder_radius") WIDTH(1.5);
 PARM(float, 1, "ar_cylinder_radius", none, none) RANGE(0,10)
	 LABELREF(ar_cylinder_radius.label) HSTRETCH;

}

ar_height.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_height.label = PARM_LABEL("Height", "ar_height") WIDTH(1.5);
 PARM(float, 1, "ar_height", none, none) RANGE(0,10)
	LOCK_RANGE_MIN LABELREF(ar_height.label) HSTRETCH;

}

ar_mesh.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 ar_mesh.label = PARM_LABEL("Mesh", "ar_mesh") WIDTH(1.5);
 PARM_FIELD(pathstring, "ar_mesh") VALUE(ar_mesh.val) 
	LABELREF(ar_mesh.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(ar_mesh.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(ar_mesh.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}

ar_filename.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

 ar_filename.label = PARM_LABEL("Photometry File", "ar_filename") WIDTH(1.5);

 PARM_FIELD (pathstring, "ar_filename") LABELREF(ar_filename.label)
	VALUE(ar_filename.val) HSTRETCH;

    ar_filename.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(ar_filename.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}

ar_decay_type.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Decay Type", "ar_decay_type") WIDTH(1.5);
    { WIDTH(0.09) }

    ar_decay_type.menu;

    { HSTRETCH }

}

ar_normalize.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ar_normalize", "Normalize") toggle VALUE(ar_normalize.val);

    { HSTRETCH }

}

categories.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    categories.label = PARM_LABEL("Categories", "categories") WIDTH(1.5);
    PARM_FIELD(string, "categories") VALUE(categories.val) 
	LABELREF(categories.label) HSTRETCH;

}

shop_lightpath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 shop_lightpath.label = PARM_LABEL("Light Shader", "shop_lightpath") WIDTH(1.5);
 PARM_FIELD(pathstring, "shop_lightpath") VALUE(shop_lightpath.val) 
	LABELREF(shop_lightpath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(shop_lightpath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(shop_lightpath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}

shop_shadowpath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 shop_shadowpath.label = PARM_LABEL("Shadow Shader", "shop_shadowpath") WIDTH(1.5);
 PARM_FIELD(pathstring, "shop_shadowpath") VALUE(shop_shadowpath.val) 
	LABELREF(shop_shadowpath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(shop_shadowpath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(shop_shadowpath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}
shadowmask.gad = NULL { }

ar_shadow_color.gad = 
{
    LAYOUT (horizontal) HSTRETCH

    ar_shadow_color.label = PARM_LABEL("Shadow Color", "ar_shadow_color") WIDTH(1.5);
    PARM(float, 3, "ar_shadow_color", none, COLOR, "R,G,B") 
	LABELREF(ar_shadow_color.label) HSTRETCH;

}

ar_shadow_density.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_shadow_density.label = PARM_LABEL("Shadow Density", "ar_shadow_density") WIDTH(1.5);
 PARM(float, 1, "ar_shadow_density", none, none) RANGE(0,1)
	LOCK_RANGE_MIN LABELREF(ar_shadow_density.label) HSTRETCH;

}

ar_cast_shadows.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ar_cast_shadows", "Cast Shadows") toggle VALUE(ar_cast_shadows.val);

    { HSTRETCH }

}

ar_cast_volumetric_shadows.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ar_cast_volumetric_shadows", "Cast Atmospheric Shadows") toggle VALUE(ar_cast_volumetric_shadows.val);

    { HSTRETCH }

}

ar_light_filters.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 ar_light_filters.label = PARM_LABEL("Light Filters", "ar_light_filters") WIDTH(1.5);
 PARM_FIELD(pathstring, "ar_light_filters") VALUE(ar_light_filters.val) 
	LABELREF(ar_light_filters.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(ar_light_filters.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(ar_light_filters.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}

ar_diffuse.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_diffuse.label = PARM_LABEL("Diffuse", "ar_diffuse") WIDTH(1.5);
 PARM(float, 1, "ar_diffuse", none, none) RANGE(0,1)
	 LABELREF(ar_diffuse.label) HSTRETCH;

}

ar_specular.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_specular.label = PARM_LABEL("Specular", "ar_specular") WIDTH(1.5);
 PARM(float, 1, "ar_specular", none, none) RANGE(0,1)
	 LABELREF(ar_specular.label) HSTRETCH;

}

ar_sss.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_sss.label = PARM_LABEL("SSS", "ar_sss") WIDTH(1.5);
 PARM(float, 1, "ar_sss", none, none) RANGE(0,1)
	 LABELREF(ar_sss.label) HSTRETCH;

}

ar_indirect.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_indirect.label = PARM_LABEL("Indirect", "ar_indirect") WIDTH(1.5);
 PARM(float, 1, "ar_indirect", none, none) RANGE(0,1)
	 LABELREF(ar_indirect.label) HSTRETCH;

}

ar_volume.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_volume.label = PARM_LABEL("Volume", "ar_volume") WIDTH(1.5);
 PARM(float, 1, "ar_volume", none, none) RANGE(0,1)
	 LABELREF(ar_volume.label) HSTRETCH;

}

ar_max_bounces.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_max_bounces.label = PARM_LABEL("Max. Bounces", "ar_max_bounces") WIDTH(1.5);
 PARM(integer, 1, "ar_max_bounces", none, none) RANGE(0,20)
	 LABELREF(ar_max_bounces.label) HSTRETCH;

}
ar_light_group_enable.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
ar_light_group_enable.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

ar_light_group_enable.gad = PARM_BUTTON("ar_light_group_enable", "") toggle VALUE(ar_light_group_enable.val);

ar_light_group.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_light_group.label = PARM_LABEL("Light Group", "ar_light_group") WIDTH(1.27);
 PARM(integer, 1, "ar_light_group", none, none) RANGE(1,8)
	LOCK_RANGE LABELREF(ar_light_group.label) HSTRETCH;

}
}	
}	// Template join.bot


ogl_enablelight.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ogl_enablelight", "Affect Viewport") toggle VALUE(ogl_enablelight.val);

    { HSTRETCH }

}

ar_affect_volumetrics.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ar_affect_volumetrics", "Affect Atmospherics") toggle VALUE(ar_affect_volumetrics.val);

    { HSTRETCH }

}

l_iconscale.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 l_iconscale.label = PARM_LABEL("Icon Scale", "l_iconscale") WIDTH(1.5);
 PARM(float, 1, "l_iconscale", none, none) RANGE(0,10)
	 LABELREF(l_iconscale.label) HSTRETCH;

}
tdisplay.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
tdisplay.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

tdisplay.gad = PARM_BUTTON("tdisplay", "") toggle VALUE(tdisplay.val);

display.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 display.label = PARM_LABEL("Display", "display") WIDTH(1.27);
 PARM(integer, 1, "display", none, none) RANGE(0,1)
	LOCK_RANGE LABELREF(display.label) HSTRETCH;

}
}	
}	// Template join.bot


use_dcolor.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("use_dcolor", "Set Wireframe Color") toggle VALUE(use_dcolor.val);

    { HSTRETCH }

}

dcolor.gad = 
{
    LAYOUT (horizontal) HSTRETCH

    dcolor.label = PARM_LABEL("Wireframe Color", "dcolor") WIDTH(1.5);
    PARM(float, 3, "dcolor", none, COLOR, "R,G,B") 
	LABELREF(dcolor.label) HSTRETCH;

}

dimmer.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 dimmer.label = PARM_LABEL("Dimmer", "dimmer") WIDTH(1.5);
 PARM(float, 1, "dimmer", none, none) RANGE(0,1)
	 LABELREF(dimmer.label) HSTRETCH;

}

caching.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("caching", "Cache Object Transform") toggle VALUE(caching.val);

    { HSTRETCH }

}

picking.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("picking", "Viewport Selecting Enabled") toggle VALUE(picking.val);

    { HSTRETCH }

}

pickscript.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

 pickscript.label = PARM_LABEL("Select Script", "pickscript") WIDTH(1.5);

 PARM_FIELD (pathstring, "pickscript") LABELREF(pickscript.label)
	VALUE(pickscript.val) HSTRETCH;

    pickscript.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(pickscript.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}

intothisobject.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("intothisobject", "Transform Into This Object") toggle VALUE(intothisobject.val);

    { HSTRETCH }

}

light_texture.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

 light_texture.label = PARM_LABEL("Texture Map", "light_texture") WIDTH(1.5);

 PARM_FIELD (pathstring, "light_texture") LABELREF(light_texture.label)
	VALUE(light_texture.val) HSTRETCH;

    light_texture.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(light_texture.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}

areageometry.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 areageometry.label = PARM_LABEL("Geometry Object", "areageometry") WIDTH(1.5);
 PARM_FIELD(pathstring, "areageometry") VALUE(areageometry.val) 
	LABELREF(areageometry.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(areageometry.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(areageometry.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}

singlesided.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("singlesided", "Single Sided") toggle VALUE(singlesided.val);

    { HSTRETCH }

}

normalizearea.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("normalizearea", "Normalize Light Intensity to Area") toggle VALUE(normalizearea.val);

    { HSTRETCH }

}

atten_type.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Attenuation", "atten_type") WIDTH(1.5);
    { WIDTH(0.09) }

    atten_type.menu;

    { HSTRETCH }

}

shadow_type.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Shadow Type", "shadow_type") WIDTH(1.5);
    { WIDTH(0.09) }

    shadow_type.menu;

    { HSTRETCH }

}

shadow_intensity.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 shadow_intensity.label = PARM_LABEL("Shadow Intensity", "shadow_intensity") WIDTH(1.5);
 PARM(float, 1, "shadow_intensity", none, none) RANGE(0,1)
	 LABELREF(shadow_intensity.label) HSTRETCH;

}

projection.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Camera Projection", "projection") WIDTH(1.5);
    { WIDTH(0.09) }

    projection.menu;

    { HSTRETCH }

}

light_conefov.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("light_conefov", "Use cone angle for field of view") toggle VALUE(light_conefov.val);

    { HSTRETCH }

}

orthowidth.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 orthowidth.label = PARM_LABEL("Orthographic Width", "orthowidth") WIDTH(1.5);
 PARM(float, 1, "orthowidth", none, none) RANGE(1,10)
	 LABELREF(orthowidth.label) HSTRETCH;

}

areasize.gad = ROW
{
   HSTRETCH

   areasize.label = PARM_LABEL("Area Size", "areasize") WIDTH(1.5);
   PARM(float, 2, "areasize", none, none, "#1,#2")
	RANGE(0,10)  LABELREF(areasize.label)
	HSTRETCH;

}

coneroll.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 coneroll.label = PARM_LABEL("Cone Rolloff", "coneroll") WIDTH(1.5);
 PARM(float, 1, "coneroll", none, none) RANGE(0.001,10)
	 LABELREF(coneroll.label) HSTRETCH;

}

conedelta.gad = ROW
{
   HSTRETCH

   conedelta.label = PARM_LABEL( "Cone Delta", "conedelta" ) WIDTH(1.5);
   PARM(float, 1, "conedelta", none, none) RANGE(0, 180)
	LABELREF( conedelta.label ) HSTRETCH;

}

coneangle.gad = ROW
{
   HSTRETCH

   coneangle.label = PARM_LABEL( "Cone Angle", "coneangle" ) WIDTH(1.5);
   PARM(float, 1, "coneangle", none, none) RANGE(0, 180)
	LABELREF( coneangle.label ) HSTRETCH;

}

light_contribdiff.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("light_contribdiff", "Diffuse Contribution") toggle VALUE(light_contribdiff.val);

    { HSTRETCH }

}

light_contribspec.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("light_contribspec", "Specular Contribution") toggle VALUE(light_contribspec.val);

    { HSTRETCH }

}

light_color.gad = 
{
    LAYOUT (horizontal) HSTRETCH

    light_color.label = PARM_LABEL("light_color", "light_color") WIDTH(1.5);
    PARM(float, 3, "light_color", none, COLOR, "R,G,B") 
	LABELREF(light_color.label) HSTRETCH;

}

light_intensity.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 light_intensity.label = PARM_LABEL("light_intensity", "light_intensity") WIDTH(1.5);
 PARM(float, 1, "light_intensity", none, none) RANGE(0,10)
	 LABELREF(light_intensity.label) HSTRETCH;

}

coneenable.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("coneenable", "coneenable") toggle VALUE(coneenable.val);

    { HSTRETCH }

}

light_type.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Light Type", "light_type") WIDTH(1.5);
    { WIDTH(0.09) }

    light_type.menu;

    { HSTRETCH }

}

light_fov.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 light_fov.label = PARM_LABEL("Projection Angle", "light_fov") WIDTH(1.5);
 PARM(float, 1, "light_fov", none, none) RANGE(0.050000000000000003,90)
	 LABELREF(light_fov.label) HSTRETCH;

}

projmap.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

 projmap.label = PARM_LABEL("Projection Map", "projmap") WIDTH(1.5);

 PARM_FIELD (pathstring, "projmap") LABELREF(projmap.label)
	VALUE(projmap.val) HSTRETCH;

    projmap.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(projmap.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}

near.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 near.label = PARM_LABEL("Near Clipping", "near") WIDTH(1.5);
 PARM(float, 1, "near", none, none) RANGE(0,10000)
	 LABELREF(near.label) HSTRETCH;

}

far.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 far.label = PARM_LABEL("Far Clipping", "far") WIDTH(1.5);
 PARM(float, 1, "far", none, none) RANGE(0,10000)
	 LABELREF(far.label) HSTRETCH;

}

areamap.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

 areamap.label = PARM_LABEL("Environment/IES Map", "areamap") WIDTH(1.5);

 PARM_FIELD (pathstring, "areamap") LABELREF(areamap.label)
	VALUE(areamap.val) HSTRETCH;

    areamap.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(areamap.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}

areamapspace.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Environment Space", "areamapspace") WIDTH(1.5);
    { WIDTH(0.09) }

    areamapspace.menu;

    { HSTRETCH }

}

areamapnull.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 areamapnull.label = PARM_LABEL("Environment Null", "areamapnull") WIDTH(1.5);
 PARM_FIELD(pathstring, "areamapnull") VALUE(areamapnull.val) 
	LABELREF(areamapnull.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(areamapnull.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(areamapnull.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}

areamapblur.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 areamapblur.label = PARM_LABEL("Map Blur Angle", "areamapblur") WIDTH(1.5);
 PARM(float, 1, "areamapblur", none, none) RANGE(0,90)
	 LABELREF(areamapblur.label) HSTRETCH;

}

areamapscale.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 areamapscale.label = PARM_LABEL("Map Angle Scale", "areamapscale") WIDTH(1.5);
 PARM(float, 1, "areamapscale", none, none) RANGE(0.10000000000000001,2)
	 LABELREF(areamapscale.label) HSTRETCH;

}

atten_dist.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 atten_dist.label = PARM_LABEL("Half Distance", "atten_dist") WIDTH(1.5);
 PARM(float, 1, "atten_dist", none, none) RANGE(0,100)
	 LABELREF(atten_dist.label) HSTRETCH;

}

atten_start.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 atten_start.label = PARM_LABEL("Attenuation Start", "atten_start") WIDTH(1.5);
 PARM(float, 1, "atten_start", none, none) RANGE(0,100)
	 LABELREF(atten_start.label) HSTRETCH;

}
activeradiusenable.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
activeradiusenable.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

activeradiusenable.gad = PARM_BUTTON("activeradiusenable", "") toggle VALUE(activeradiusenable.val);

activeradius.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 activeradius.label = PARM_LABEL("Active Radius", "activeradius") WIDTH(1.27);
 PARM(float, 1, "activeradius", none, none) RANGE(0,100)
	 LABELREF(activeradius.label) HSTRETCH;

}
}	
}	// Template join.bot


attenrampenable.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("attenrampenable", "Use Attenuation Ramp Multiplier") toggle VALUE(attenrampenable.val);

    { HSTRETCH }

}

atten_rampstart.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 atten_rampstart.label = PARM_LABEL("Ramp Start Distance", "atten_rampstart") WIDTH(1.5);
 PARM(float, 1, "atten_rampstart", none, none) RANGE(0,100)
	 LABELREF(atten_rampstart.label) HSTRETCH;

}

atten_rampend.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 atten_rampend.label = PARM_LABEL("Ramp End Distance", "atten_rampend") WIDTH(1.5);
 PARM(float, 1, "atten_rampend", none, none) RANGE(0,100)
	 LABELREF(atten_rampend.label) HSTRETCH;

}

attenramp.si_rampedit = COLOR_RAMP VALUE(attenramp.ramp_val)
			LAYOUT(horizontal)  HSTRETCH;

attenramp.multiramp = 
{
    LAYOUT(vertical) STRETCH

    ROW
    {
	LOOK(plain) JUSTIFY(left,center) SPACING(0.1) VMARGIN(0.02) HSTRETCH

	COL
	{
	    JUSTIFY(right,center) WIDTH(1.5)
	    LABEL "Point No.";
	}

	attenramp.pointno.gad
	    = INT_SLIDER_FIELD VALUE(attenramp.pointno.val) HSTRETCH;
    }
}

attenramp.buttons.gad = COL
{
    VSTRETCH

    ICON_BUTTON_STRIP
    {
	LAYOUT(horizontal) INITSIZE(20p, 20p) 

	ACTION_ICONBUTTON "BUTTONS_delete"
		HELP("Remove Point") VALUE(attenramp.delpoint.val);
	ACTION_ICONBUTTON "BUTTONS_add"
		HELP("Add Point") VALUE(attenramp.addpoint.val);
    }

    { VSTRETCH }

    attenramp.toggleparms.gad
      = ACTION_ICONBUTTON "BUTTONS_show_controls"
	HELP("Hide Controls")
	VALUE(attenramp.toggle.val)
	SENDSKEY("h.pane.parms.toggle_ramp_parms")
	LOOKFLAT UI_FLAT_ICON_BTN_SIZE_TINY;
}

attenramp.parm =
{
    LAYOUT(vertical) HSTRETCH JUSTIFY(left, center)

    attenramp.ramp.gad = ROW
    {
	MARGIN(0.02) SPACING(0.02) JUSTIFY(left, top) HSTRETCH

	attenramp.buttons.gad VSTRETCH;

	attenramp.si_rampedit HSTRETCH;
    }
}

attenramp.gad =
{
    LAYOUT(vertical) MARGIN(2p) HSTRETCH

    {
	LAYOUT(horizontal) HSTRETCH

	PARM_LABEL_SIMPLE("Attenuation Ramp Multiplier", "attenramp");

	{ HSTRETCH }

    }

    {
	LAYOUT(vertical) MARGIN(2p) SPACING(0.02) LOOK(lightline) HSTRETCH

	attenramp.parm;

	SWITCHER tight
	{
	    LAYOUT(overlap) VALUE(attenramp.hideparms.val) HSTRETCH
	    attenramp.multiramp;
	    {}
	}
    }
}

atten_folder_1.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG
    { 
	VALUE(atten_folder_1.gad.val) STRETCH(1,0)

	TAB "Spot Light Options"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(2p) SPACING(2p)
	    light_fov.gad;		
	    projmap.gad;		
	    near.gad;		
	    far.gad;		
	    areamap.gad;		
	    areamapspace.gad;		
	    areamapnull.gad;		
	    areamapblur.gad;		
	    areamapscale.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Attenuation Options"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(2p) SPACING(2p)
	    atten_dist.gad;		
	    atten_start.gad;		
	    activeradiusenable.row.join;		
	    attenrampenable.gad;		
	    atten_rampstart.gad;		
	    atten_rampend.gad;		
	    attenramp.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}
    } 
}

folder0_1.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG
    { 
	VALUE(folder0_1.gad.val) STRETCH(1,0)

	TAB "Light"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(2p) SPACING(2p)
	    atten_folder_1.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}
    } 
}

folder1.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG
    { 
	VALUE(folder1.gad.val) STRETCH(1,0)

	TAB "Transform"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    keeppos.row.join;		
	    xOrd.row.join;		
	    t.gad;		
	    r.gad;		
	    s.gad;		
	    scale.gad;		
	    p.gad;		
	    lookatpath.gad;		
	    lookup.gad;		
	    pathobjpath.gad;		
	    roll.gad;		
	    pos.gad;		
	    uparmtype.gad;		
	    pathorient.gad;		
	    up.gad;		
	    bank.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB " Light "
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    ar_light_type.row.join;		
	    ar_light_color_type.row.join;		
	    ar_format.gad;		
	    ar_color.gad;		
	    ar_light_color_texture.gad;		
	    ar_light_color_shader.gad;		
	    ar_intensity.gad;		
	    ar_exposure.gad;		
	    ar_volume_density.gad;		
	    ar_samples.gad;		
	    ar_volume_samples.gad;		
	    ar_point_radius.gad;		
	    ar_angle.gad;		
	    ar_cone_angle.gad;		
	    ar_penumbra_angle.gad;		
	    ar_spot_radius.gad;		
	    ar_lens_radius.gad;		
	    ar_aspect_ratio.gad;		
	    ar_quad_size.gad;		
	    ar_disk_radius.gad;		
	    ar_cylinder_radius.gad;		
	    ar_height.gad;		
	    ar_mesh.gad;		
	    ar_filename.gad;		
	    ar_decay_type.gad;		
	    ar_normalize.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Shadows"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    shadowmask.gad;		
	    ar_shadow_color.gad;		
	    ar_shadow_density.gad;		
	    ar_cast_shadows.gad;		
	    ar_cast_volumetric_shadows.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB " Filters "
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    ar_light_filters.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Contribution"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    ar_diffuse.gad;		
	    ar_specular.gad;		
	    ar_sss.gad;		
	    ar_indirect.gad;		
	    ar_volume.gad;		
	    ar_max_bounces.gad;		
	    ar_light_group_enable.row.join;		
	    ogl_enablelight.gad;		
	    ar_affect_volumetrics.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Viewport"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    l_iconscale.gad;		
	    tdisplay.row.join;		
	    use_dcolor.gad;		
	    dcolor.gad;		
	    dimmer.gad;		
	    caching.gad;		
	    picking.gad;		
	    pickscript.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}
    } 
}

dialog_norm.gad = 
{
    LAYOUT(vertical) SPACING(0.02) HSTRETCH LOOK(plain) 
    folder1.gad; 
} 
// dialog.bot.ui

extrastuffstowbar_minimize.val := 1;

dialog = OPENNOTIFIER
{
    LAYOUT(vertical) SPACING(0.02) LOOK(bg) VALUE(open.val) HSTRETCH

    { HEIGHT(1p) LOOK(bg) HSTRETCH }

    dialog_norm.gad;
}
